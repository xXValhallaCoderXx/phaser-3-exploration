{"ast":null,"code":"import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\");\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n    this.createInput();\n    this.createGameManager();\n  }\n\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n  }\n\n  createPlayer(player) {\n    this.player = new PlayerContainer(this, player.x * 2, player.y * 2, \"characters\", 0, player.health, player.maxHealth, player.id, this.playerAttackAudio); // NEW\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!chest) {\n      chest = new Chest(this, chestObj.x * 2, chestObj.y * 2, \"items\", 0, chestObj.gold, chestObj.id);\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!monster) {\n      monster = new Monster(this, monsterObj.x, monsterObj.y, \"monsters\", monsterObj.frame, monsterObj.id, monsterObj.health, monsterObj.maxHealth);\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(this.player, this.chests, this.collectChest, null, this);\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(this.player.weapon, this.monsters, this.enemyOverlap, null, this);\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true; // enemy.makeInactive();\n\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n    this.events.emit(\"updateScore\", this.score); // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    this.events.on(\"spawnPlayer\", player => {\n      this.createPlayer(player);\n      this.addCollisions();\n    });\n    this.events.on(\"chestSpawned\", chest => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", monster => {\n      this.spawnMonster(monster);\n    });\n    this.events.on(\"monsterRemoved\", monsterID => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n    this.events.on(\"chestRemoved\", chestID => {\n      this.chests.getChildren().forEach(chest => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n    this.events.on(\"monsterMovement\", monsters => {\n      this.monsters.getChildren().forEach(monster => {\n        Object.keys(monsters).forEach(monsterID => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n    this.events.on(\"respawnPlayer\", player => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n\n}\n\nexport default GameScene;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/scenes/GameScene.js"],"names":["Phaser","PlayerContainer","Chest","Monster","GameManager","GameScene","Scene","constructor","init","scene","launch","preload","create","createMap","createAudio","createGroups","createInput","createGameManager","update","player","cursors","goldPickupSound","sound","add","loop","playerAttackAudio","playerDamageAudio","playerDeathAudio","monsterDeathAudio","createPlayer","x","y","health","maxHealth","id","chests","physics","group","monsters","runChildUpdate","spawnChest","chestObj","chest","getFirstDead","gold","setCollideWorldBounds","coins","setPosition","makeActive","spawnMonster","monsterObj","monster","frame","setTexture","input","keyboard","createCursorKeys","addCollisions","collider","map","blockedLayer","overlap","collectChest","weapon","enemyOverlap","enemy","playerAttacking","swordHit","events","emit","makeInactive","play","score","Map","on","monsterID","getChildren","forEach","chestID","updateHealth","Object","keys","moveToObject","playerID","respawn","gameManager","objects","setup"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\");\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n\n    this.createInput();\n\n    this.createGameManager();\n  }\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n  }\n\n  createPlayer(player) {\n    this.player = new PlayerContainer(\n      this,\n      player.x * 2,\n      player.y * 2,\n      \"characters\",\n      0,\n      player.health,\n      player.maxHealth,\n      player.id,\n      this.playerAttackAudio\n    ); // NEW\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!chest) {\n      chest = new Chest(\n        this,\n        chestObj.x * 2,\n        chestObj.y * 2,\n        \"items\",\n        0,\n        chestObj.gold,\n        chestObj.id\n      );\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!monster) {\n      monster = new Monster(\n        this,\n        monsterObj.x,\n        monsterObj.y,\n        \"monsters\",\n        monsterObj.frame,\n        monsterObj.id,\n        monsterObj.health,\n        monsterObj.maxHealth\n      );\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player,\n      this.chests,\n      this.collectChest,\n      null,\n      this\n    );\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player.weapon,\n      this.monsters,\n      this.enemyOverlap,\n      null,\n      this\n    );\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n      // enemy.makeInactive();\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n\n    this.events.emit(\"updateScore\", this.score);\n    // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    this.events.on(\"spawnPlayer\", (player) => {\n      this.createPlayer(player);\n      this.addCollisions();\n    });\n    this.events.on(\"chestSpawned\", (chest) => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", (monster) => {\n      this.spawnMonster(monster);\n    });\n\n    this.events.on(\"monsterRemoved\", (monsterID) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n\n    this.events.on(\"chestRemoved\", (chestID) => {\n      this.chests.getChildren().forEach((chest) => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n\n    this.events.on(\"monsterMovement\", (monsters) => {\n      this.monsters.getChildren().forEach((monster) => {\n        Object.keys(monsters).forEach((monsterID) => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n\n    this.events.on(\"respawnPlayer\", (player) => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n}\n\nexport default GameScene;\n"]},"metadata":{},"sourceType":"module"}