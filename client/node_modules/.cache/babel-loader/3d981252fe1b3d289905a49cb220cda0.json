{"ast":null,"code":"import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n    this.socket = SocketService === null || SocketService === void 0 ? void 0 : SocketService.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\"); // Listen for websocket Events\n\n    this.socketListener();\n  }\n\n  socketListener() {\n    // Spawn player game objects\n    this.socket.on(\"currentPlayers\", players => {\n      console.log(\"All current players: \", players);\n      Object.keys(players).forEach(id => {\n        if (players[id].id === this.socket.id) {\n          this.createPlayer(players[id], true);\n          this.addCollisions();\n        } else {\n          this.createPlayer(players[id], false);\n        }\n      });\n    });\n    this.socket.on(\"currentMonsters\", monsters => {\n      console.log(\"Current Mosnters\", monsters);\n    });\n    this.socket.on(\"currentChests\", chests => {\n      console.log(\"CUrent chests\", chests);\n    });\n    this.socket.on(\"spawnPlayer\", player => {\n      console.log(\"New Player Event\", player);\n      this.createPlayer(player, false);\n    });\n    this.socket.on(\"playerMoved\", player => {\n      this.otherPlayers.getChildren().forEach(otherPlayer => {\n        if (player.id === otherPlayer.id) {\n          console.log(\"OTHER PLAYER: \", otherPlayer);\n          otherPlayer.flipX = player.flipX;\n          otherPlayer.setPosition(player.x, player.y);\n          otherPlayer.updateHealthBar();\n          otherPlayer.updateFlipX();\n        }\n      });\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n    this.createInput(); //  this.createGameManager();\n\n    this.socket.emit(\"newPlayer\");\n  }\n\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    } // Check if current pos or flip x is different to rec to see if player moved\n\n\n    if (this.player) {\n      var _this$player$x, _this$player, _this$player$y, _this$player2, _this$player3, _this$player4;\n\n      // emit movement to server\n      const {\n        x,\n        y,\n        flipX,\n        playerAttacking,\n        currentDirection\n      } = this.player;\n\n      if (this.player.oldPosition && (x !== this.player.oldPosition.x || y !== this.player.oldPosition.y || flipX !== this.player.oldPosition.flipX || playerAttacking == !this.player.oldPosition.playerAttacking)) {\n        this.socket.emit(\"playerMovement\", {\n          x,\n          y,\n          flipX,\n          playerAttacking,\n          currentDirection\n        });\n      } // Save old position\n\n\n      this.player.oldPosition = {\n        x: (_this$player$x = (_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.x) !== null && _this$player$x !== void 0 ? _this$player$x : 0,\n        y: (_this$player$y = (_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.y) !== null && _this$player$y !== void 0 ? _this$player$y : 0,\n        flipX: (_this$player3 = this.player) === null || _this$player3 === void 0 ? void 0 : _this$player3.flipX,\n        playerAttacking: (_this$player4 = this.player) === null || _this$player4 === void 0 ? void 0 : _this$player4.playerAttacking\n      };\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n  }\n\n  createPlayer(playerObject, mainPlayer) {\n    const newPlayerGameObject = new PlayerContainer(this, playerObject.x * 2, playerObject.y * 2, \"characters\", 0, playerObject.health, playerObject.maxHealth, playerObject.id, this.playerAttackAudio, mainPlayer); // NEW\n\n    if (!mainPlayer) {\n      this.otherPlayers.add(newPlayerGameObject);\n    } else {\n      this.player = newPlayerGameObject;\n    }\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n    // Other plays\n\n    this.otherPlayers = this.physics.add.group();\n    this.otherPlayers.runChildUpdate = true;\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!chest) {\n      chest = new Chest(this, chestObj.x * 2, chestObj.y * 2, \"items\", 0, chestObj.gold, chestObj.id);\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!monster) {\n      monster = new Monster(this, monsterObj.x, monsterObj.y, \"monsters\", monsterObj.frame, monsterObj.id, monsterObj.health, monsterObj.maxHealth);\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    console.log(\"WJA TI: \", this);\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(this.player, this.chests, this.collectChest, null, this);\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(this.player.weapon, this.monsters, this.enemyOverlap, null, this);\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true; // enemy.makeInactive();\n\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n    this.events.emit(\"updateScore\", this.score); // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    // this.events.on(\"spawnPlayer\", (player) => {\n    //   this.createPlayer(player);\n    //   this.addCollisions();\n    // });\n    this.events.on(\"chestSpawned\", chest => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", monster => {\n      this.spawnMonster(monster);\n    });\n    this.events.on(\"monsterRemoved\", monsterID => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n    this.events.on(\"chestRemoved\", chestID => {\n      this.chests.getChildren().forEach(chest => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n    this.events.on(\"monsterMovement\", monsters => {\n      this.monsters.getChildren().forEach(monster => {\n        Object.keys(monsters).forEach(monsterID => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n    this.events.on(\"respawnPlayer\", player => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n\n}\n\nexport default GameScene;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/scenes/GameScene.js"],"names":["Phaser","PlayerContainer","Chest","Monster","GameManager","Map","SocketService","GameScene","Scene","constructor","socket","init","scene","launch","socketListener","on","players","console","log","Object","keys","forEach","id","createPlayer","addCollisions","monsters","chests","player","otherPlayers","getChildren","otherPlayer","flipX","setPosition","x","y","updateHealthBar","updateFlipX","preload","create","createMap","createAudio","createGroups","createInput","emit","update","cursors","playerAttacking","currentDirection","oldPosition","goldPickupSound","sound","add","loop","playerAttackAudio","playerDamageAudio","playerDeathAudio","monsterDeathAudio","playerObject","mainPlayer","newPlayerGameObject","health","maxHealth","physics","group","runChildUpdate","spawnChest","chestObj","chest","getFirstDead","gold","setCollideWorldBounds","coins","makeActive","spawnMonster","monsterObj","monster","frame","setTexture","input","keyboard","createCursorKeys","collider","map","blockedLayer","overlap","collectChest","weapon","enemyOverlap","enemy","swordHit","events","makeInactive","play","score","createGameManager","monsterID","chestID","updateHealth","moveToObject","playerID","respawn","gameManager","objects","setup"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n\n    this.socket = SocketService?.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\");\n\n    // Listen for websocket Events\n    this.socketListener();\n  }\n\n  socketListener() {\n    // Spawn player game objects\n    this.socket.on(\"currentPlayers\", (players) => {\n      console.log(\"All current players: \", players);\n      Object.keys(players).forEach((id) => {\n        if (players[id].id === this.socket.id) {\n          this.createPlayer(players[id], true);\n          this.addCollisions();\n        } else {\n          this.createPlayer(players[id], false);\n        }\n      });\n    });\n    this.socket.on(\"currentMonsters\", (monsters) => {\n      console.log(\"Current Mosnters\", monsters);\n    });\n    this.socket.on(\"currentChests\", (chests) => {\n      console.log(\"CUrent chests\", chests);\n    });\n    this.socket.on(\"spawnPlayer\", (player) => {\n      console.log(\"New Player Event\", player);\n      this.createPlayer(player, false);\n    });\n\n    this.socket.on(\"playerMoved\", (player) => {\n      this.otherPlayers.getChildren().forEach((otherPlayer) => {\n        if (player.id === otherPlayer.id) {\n          console.log(\"OTHER PLAYER: \", otherPlayer);\n          otherPlayer.flipX = player.flipX;\n          otherPlayer.setPosition(player.x, player.y);\n          otherPlayer.updateHealthBar();\n          otherPlayer.updateFlipX();\n        }\n      });\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n\n    this.createInput();\n\n    //  this.createGameManager();\n    this.socket.emit(\"newPlayer\");\n  }\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    }\n\n    // Check if current pos or flip x is different to rec to see if player moved\n    if (this.player) {\n      // emit movement to server\n      const { x, y, flipX, playerAttacking, currentDirection } = this.player;\n      if (\n        this.player.oldPosition &&\n        (x !== this.player.oldPosition.x ||\n          y !== this.player.oldPosition.y ||\n          flipX !== this.player.oldPosition.flipX ||\n          playerAttacking == !this.player.oldPosition.playerAttacking)\n      ) {\n        this.socket.emit(\"playerMovement\", {\n          x,\n          y,\n          flipX,\n          playerAttacking,\n          currentDirection,\n        });\n      }\n\n      // Save old position\n      this.player.oldPosition = {\n        x: this.player?.x ?? 0,\n        y: this.player?.y ?? 0,\n        flipX: this.player?.flipX,\n        playerAttacking: this.player?.playerAttacking,\n      };\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n  }\n\n  createPlayer(playerObject, mainPlayer) {\n    const newPlayerGameObject = new PlayerContainer(\n      this,\n      playerObject.x * 2,\n      playerObject.y * 2,\n      \"characters\",\n      0,\n      playerObject.health,\n      playerObject.maxHealth,\n      playerObject.id,\n      this.playerAttackAudio,\n      mainPlayer\n    ); // NEW\n\n    if (!mainPlayer) {\n      this.otherPlayers.add(newPlayerGameObject);\n    } else {\n      this.player = newPlayerGameObject;\n    }\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n\n    // Other plays\n    this.otherPlayers = this.physics.add.group();\n    this.otherPlayers.runChildUpdate = true;\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!chest) {\n      chest = new Chest(\n        this,\n        chestObj.x * 2,\n        chestObj.y * 2,\n        \"items\",\n        0,\n        chestObj.gold,\n        chestObj.id\n      );\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!monster) {\n      monster = new Monster(\n        this,\n        monsterObj.x,\n        monsterObj.y,\n        \"monsters\",\n        monsterObj.frame,\n        monsterObj.id,\n        monsterObj.health,\n        monsterObj.maxHealth\n      );\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    console.log(\"WJA TI: \", this);\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player,\n      this.chests,\n      this.collectChest,\n      null,\n      this\n    );\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player.weapon,\n      this.monsters,\n      this.enemyOverlap,\n      null,\n      this\n    );\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n      // enemy.makeInactive();\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n\n    this.events.emit(\"updateScore\", this.score);\n    // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    // this.events.on(\"spawnPlayer\", (player) => {\n    //   this.createPlayer(player);\n    //   this.addCollisions();\n    // });\n    this.events.on(\"chestSpawned\", (chest) => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", (monster) => {\n      this.spawnMonster(monster);\n    });\n\n    this.events.on(\"monsterRemoved\", (monsterID) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n\n    this.events.on(\"chestRemoved\", (chestID) => {\n      this.chests.getChildren().forEach((chest) => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n\n    this.events.on(\"monsterMovement\", (monsters) => {\n      this.monsters.getChildren().forEach((monster) => {\n        Object.keys(monsters).forEach((monsterID) => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n\n    this.events.on(\"respawnPlayer\", (player) => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n}\n\nexport default GameScene;\n"]},"metadata":{},"sourceType":"module"}