{"ast":null,"code":"import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n    this.socket = SocketService === null || SocketService === void 0 ? void 0 : SocketService.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\"); // List for socket events\n\n    this.socketListener();\n  }\n\n  socketListener() {\n    // Spawn player game objects\n    this.socket.on(\"currentPlayers\", players => {\n      console.log(\"CUrrent players\", players);\n    });\n    this.socket.on(\"currentMonsters\", monsters => {\n      console.log(\"Current Mosnters\", monsters);\n    });\n    this.socket.on(\"currentChests\", chests => {\n      console.log(\"CUrent chests\", chests);\n    });\n    this.socket.on(\"newPlayer\", player => {\n      console.log(\"New Player Event\", player);\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n    this.createInput(); //  this.createGameManager();\n\n    this.socket.emit(\"newPlayer\");\n  }\n\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false // volume: 0.2,\n\n    });\n  }\n\n  createPlayer(player) {\n    this.player = new PlayerContainer(this, player.x * 2, player.y * 2, \"characters\", 0, player.health, player.maxHealth, player.id, this.playerAttackAudio); // NEW\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!chest) {\n      chest = new Chest(this, chestObj.x * 2, chestObj.y * 2, \"items\", 0, chestObj.gold, chestObj.id);\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!monster) {\n      monster = new Monster(this, monsterObj.x, monsterObj.y, \"monsters\", monsterObj.frame, monsterObj.id, monsterObj.health, monsterObj.maxHealth);\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    console.log(\"WJA TI: \", this);\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(this.player, this.chests, this.collectChest, null, this);\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(this.player.weapon, this.monsters, this.enemyOverlap, null, this);\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true; // enemy.makeInactive();\n\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n    this.events.emit(\"updateScore\", this.score); // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    this.events.on(\"spawnPlayer\", player => {\n      this.createPlayer(player);\n      this.addCollisions();\n    });\n    this.events.on(\"chestSpawned\", chest => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", monster => {\n      this.spawnMonster(monster);\n    });\n    this.events.on(\"monsterRemoved\", monsterID => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n    this.events.on(\"chestRemoved\", chestID => {\n      this.chests.getChildren().forEach(chest => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n    this.events.on(\"monsterMovement\", monsters => {\n      this.monsters.getChildren().forEach(monster => {\n        Object.keys(monsters).forEach(monsterID => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n    this.events.on(\"respawnPlayer\", player => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n\n}\n\nexport default GameScene;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/scenes/GameScene.js"],"names":["Phaser","PlayerContainer","Chest","Monster","GameManager","Map","SocketService","GameScene","Scene","constructor","socket","init","scene","launch","socketListener","on","players","console","log","monsters","chests","player","preload","create","createMap","createAudio","createGroups","createInput","emit","update","cursors","goldPickupSound","sound","add","loop","playerAttackAudio","playerDamageAudio","playerDeathAudio","monsterDeathAudio","createPlayer","x","y","health","maxHealth","id","physics","group","runChildUpdate","spawnChest","chestObj","chest","getFirstDead","gold","setCollideWorldBounds","coins","setPosition","makeActive","spawnMonster","monsterObj","monster","frame","setTexture","input","keyboard","createCursorKeys","addCollisions","collider","map","blockedLayer","overlap","collectChest","weapon","enemyOverlap","enemy","playerAttacking","swordHit","events","makeInactive","play","score","createGameManager","monsterID","getChildren","forEach","chestID","updateHealth","Object","keys","moveToObject","playerID","respawn","gameManager","objects","setup"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport GameManager from \"game-core/classes/game-manager/GameManager\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n\n    this.socket = SocketService?.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\");\n\n    // List for socket events\n    this.socketListener();\n  }\n\n  socketListener() {\n    // Spawn player game objects\n    this.socket.on(\"currentPlayers\", (players) => {\n      console.log(\"CUrrent players\", players);\n    });\n    this.socket.on(\"currentMonsters\", (monsters) => {\n      console.log(\"Current Mosnters\", monsters);\n    });\n    this.socket.on(\"currentChests\", (chests) => {\n      console.log(\"CUrent chests\", chests);\n    });\n    this.socket.on(\"newPlayer\", (player) => {\n      console.log(\"New Player Event\", player);\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n\n    this.createInput();\n\n    //  this.createGameManager();\n    this.socket.emit(\"newPlayer\");\n  }\n  update() {\n    if (this.player) {\n      // On classes update method is not run automatically so we are calling it\n      this.player.update(this.cursors);\n    }\n  }\n\n  createAudio() {\n    this.goldPickupSound = this.sound.add(\"goalSound\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerAttackAudio = this.sound.add(\"playerAttack\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDamageAudio = this.sound.add(\"playerDamage\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.playerDeathAudio = this.sound.add(\"playerDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n    this.monsterDeathAudio = this.sound.add(\"enemyDeath\", {\n      loop: false,\n      // volume: 0.2,\n    });\n  }\n\n  createPlayer(player) {\n    this.player = new PlayerContainer(\n      this,\n      player.x * 2,\n      player.y * 2,\n      \"characters\",\n      0,\n      player.health,\n      player.maxHealth,\n      player.id,\n      this.playerAttackAudio\n    ); // NEW\n  }\n\n  createGroups() {\n    // Chest group\n    this.chests = this.physics.add.group();\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // Will run update in all children\n    // Create locations\n    // this.chestPositons = [\n    //   [100, 100],\n    //   [200, 200],\n    //   [300, 300],\n    //   [400, 400],\n    //   [500, 500],\n    // ];\n\n    // // Max number of chests\n    // this.maxNumber = 3;\n    // for (let i = 0; i < this.maxNumber; i += 1) {\n    //   // SPawn chest\n    //   this.spawnChest();\n    // }\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!chest) {\n      chest = new Chest(\n        this,\n        chestObj.x * 2,\n        chestObj.y * 2,\n        \"items\",\n        0,\n        chestObj.gold,\n        chestObj.id\n      );\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!monster) {\n      monster = new Monster(\n        this,\n        monsterObj.x,\n        monsterObj.y,\n        \"monsters\",\n        monsterObj.frame,\n        monsterObj.id,\n        monsterObj.health,\n        monsterObj.maxHealth\n      );\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    console.log(\"WJA TI: \", this);\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player,\n      this.chests,\n      this.collectChest,\n      null,\n      this\n    );\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player.weapon,\n      this.monsters,\n      this.enemyOverlap,\n      null,\n      this\n    );\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n      // enemy.makeInactive();\n      this.events.emit(\"monsterAttacked\", enemy.id, this.player.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n\n    this.events.emit(\"updateScore\", this.score);\n    // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n    this.events.emit(\"pickupChest\", chest.id, player.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n  createGameManager() {\n    this.events.on(\"spawnPlayer\", (player) => {\n      this.createPlayer(player);\n      this.addCollisions();\n    });\n    this.events.on(\"chestSpawned\", (chest) => {\n      this.spawnChest(chest);\n    });\n    this.events.on(\"monsterSpawned\", (monster) => {\n      this.spawnMonster(monster);\n    });\n\n    this.events.on(\"monsterRemoved\", (monsterID) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n\n    this.events.on(\"chestRemoved\", (chestID) => {\n      this.chests.getChildren().forEach((chest) => {\n        if (chest.id === chestID) {\n          chest.makeInactive();\n        }\n      });\n    });\n\n    this.events.on(\"updateMonsterHealth\", (monsterID, health) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterID) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n\n    this.events.on(\"monsterMovement\", (monsters) => {\n      this.monsters.getChildren().forEach((monster) => {\n        Object.keys(monsters).forEach((monsterID) => {\n          if (monster.id === monsterID) {\n            this.physics.moveToObject(monster, monsters[monsterID], 40);\n          }\n        });\n      });\n    });\n\n    this.events.on(\"updatePlayerHealth\", (playerID, health) => {\n      this.player.updateHealth(health);\n      if (health < this.player.health) {\n        this.playerDamageAudio.play();\n      }\n    });\n\n    this.events.on(\"respawnPlayer\", (player) => {\n      this.player.respawn(player);\n      this.playerDeathAudio.play();\n    });\n    this.gameManager = new GameManager(this, this.map.map.objects);\n    this.gameManager.setup();\n  }\n}\n\nexport default GameScene;\n"]},"metadata":{},"sourceType":"module"}