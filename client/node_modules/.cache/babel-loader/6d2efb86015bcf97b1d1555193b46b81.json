{"ast":null,"code":"import { SPAWN_TYPE, randomNumber } from \"game-core/utils\";\nimport ChestModel from \"./ChestModel\";\nimport MonsterModel from \"./MonsterModel\";\n\nclass Spawner {\n  constructor(config, spawnLocations, addObject, deleteObject, moveObjects) {\n    this.id = config.id;\n    this.spawnInterval = config.spawnInterval;\n    this.limit = config.limit;\n    this.objectType = config.spawnerType;\n    this.spawnLocations = spawnLocations;\n    this.addObject = addObject;\n    this.deleteObject = deleteObject;\n    this.moveObjects = moveObjects;\n    this.objectsCreated = [];\n    this.start();\n  }\n\n  start() {\n    this.interval = setInterval(() => {\n      if (this.objectsCreated.length < this.limit) {\n        this.spawnObject();\n      }\n    }, this.spawnInterval);\n\n    if (this.objectType === SPAWN_TYPE.MONSTER) {\n      this.moveMonsters();\n    }\n  }\n\n  spawnObject() {\n    if (this.objectType === SPAWN_TYPE.CHEST) {\n      this.spawnChest();\n    } else if (this.objectType === SPAWN_TYPE.MONSTER) {\n      this.spawnMonster();\n    }\n  }\n\n  spawnChest() {\n    const location = this.pickRandomLocation();\n    const gold = randomNumber(1, 100);\n    const chest = new ChestModel(location[0], location[1], gold, this.id);\n    this.objectsCreated.push(chest);\n    this.addObject(chest.id, chest);\n  }\n\n  spawnMonster() {\n    const location = this.pickRandomLocation();\n    const gold = randomNumber(1, 100);\n    const monsterType = randomNumber(0, 20);\n    const health = randomNumber(3, 5);\n    const monster = new MonsterModel(location[0], location[1], gold, this.id, monsterType, health, 1);\n    this.objectsCreated.push(monster);\n    this.addObject(monster.id, monster);\n  }\n\n  pickRandomLocation() {\n    const location = this.spawnLocations[Math.floor(Math.random() * this.spawnLocations.length)]; // Check current locations are not already taken\n\n    const invalidLocations = this.objectsCreated.some(obj => {\n      if (obj.x === location[0] && this.objectType.y === location[1]) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (invalidLocations) {\n      return this.pickRandomLocation();\n    }\n\n    return location;\n  }\n\n  removeObject(id) {\n    // eslint-disable-next-line no-unused-expressions\n    this.objectsCreated === this.objectsCreated.filter(obj => obj.id !== id);\n    this.deleteObject(id);\n  }\n\n  moveMonsters() {\n    this.moveMonsterInterval = setInterval(() => {\n      this.objectsCreated.forEach(monster => {\n        monster.move();\n      });\n      this.moveObjects();\n    }, 1000);\n  }\n\n}\n\nexport default Spawner;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/classes/game-manager/Spawner.js"],"names":["SPAWN_TYPE","randomNumber","ChestModel","MonsterModel","Spawner","constructor","config","spawnLocations","addObject","deleteObject","moveObjects","id","spawnInterval","limit","objectType","spawnerType","objectsCreated","start","interval","setInterval","length","spawnObject","MONSTER","moveMonsters","CHEST","spawnChest","spawnMonster","location","pickRandomLocation","gold","chest","push","monsterType","health","monster","Math","floor","random","invalidLocations","some","obj","x","y","removeObject","filter","moveMonsterInterval","forEach","move"],"mappings":"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","sourcesContent":["import { SPAWN_TYPE, randomNumber } from \"game-core/utils\";\nimport ChestModel from \"./ChestModel\";\nimport MonsterModel from \"./MonsterModel\";\nclass Spawner {\n  constructor(config, spawnLocations, addObject, deleteObject, moveObjects) {\n    this.id = config.id;\n    this.spawnInterval = config.spawnInterval;\n    this.limit = config.limit;\n    this.objectType = config.spawnerType;\n    this.spawnLocations = spawnLocations;\n    this.addObject = addObject;\n    this.deleteObject = deleteObject;\n    this.moveObjects = moveObjects;\n    this.objectsCreated = [];\n\n    this.start();\n  }\n\n  start() {\n    this.interval = setInterval(() => {\n      if (this.objectsCreated.length < this.limit) {\n        this.spawnObject();\n      }\n    }, this.spawnInterval);\n    if (this.objectType === SPAWN_TYPE.MONSTER) {\n      this.moveMonsters();\n    }\n  }\n\n  spawnObject() {\n    if (this.objectType === SPAWN_TYPE.CHEST) {\n      this.spawnChest();\n    } else if (this.objectType === SPAWN_TYPE.MONSTER) {\n      this.spawnMonster();\n    }\n  }\n\n  spawnChest() {\n    const location = this.pickRandomLocation();\n    const gold = randomNumber(1, 100);\n    const chest = new ChestModel(location[0], location[1], gold, this.id);\n    this.objectsCreated.push(chest);\n    this.addObject(chest.id, chest);\n  }\n\n  spawnMonster() {\n    const location = this.pickRandomLocation();\n    const gold = randomNumber(1, 100);\n    const monsterType = randomNumber(0, 20);\n    const health = randomNumber(3, 5);\n    const monster = new MonsterModel(\n      location[0],\n      location[1],\n      gold,\n      this.id,\n      monsterType,\n      health,\n      1\n    );\n    this.objectsCreated.push(monster);\n    this.addObject(monster.id, monster);\n  }\n\n  pickRandomLocation() {\n    const location =\n      this.spawnLocations[\n        Math.floor(Math.random() * this.spawnLocations.length)\n      ];\n\n    // Check current locations are not already taken\n    const invalidLocations = this.objectsCreated.some((obj) => {\n      if (obj.x === location[0] && this.objectType.y === location[1]) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    if (invalidLocations) {\n      return this.pickRandomLocation();\n    }\n    return location;\n  }\n\n  removeObject(id) {\n    // eslint-disable-next-line no-unused-expressions\n    this.objectsCreated === this.objectsCreated.filter((obj) => obj.id !== id);\n    this.deleteObject(id);\n  }\n\n  moveMonsters() {\n    this.moveMonsterInterval = setInterval(() => {\n      this.objectsCreated.forEach((monster) => {\n        monster.move();\n      });\n      this.moveObjects();\n    }, 1000);\n  }\n}\n\nexport default Spawner;\n"]},"metadata":{},"sourceType":"module"}