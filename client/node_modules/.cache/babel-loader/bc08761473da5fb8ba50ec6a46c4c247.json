{"ast":null,"code":"import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n    this.socket = SocketService === null || SocketService === void 0 ? void 0 : SocketService.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\"); // listen for socket event\n\n    this.listenForSocketEvents();\n  }\n\n  listenForSocketEvents() {\n    // spawn player game objects\n    this.socket.on('currentPlayers', players => {\n      Object.keys(players).forEach(id => {\n        if (players[id].id === this.socket.id) {\n          this.createPlayer(players[id], true);\n          this.addCollisions();\n        } else {\n          this.createPlayer(players[id], false);\n        }\n      });\n    }); // spawn monster game objects\n\n    this.socket.on('currentMonsters', monsters => {\n      Object.keys(monsters).forEach(id => {\n        this.spawnMonster(monsters[id]);\n      });\n    }); // spawn chest game objects\n\n    this.socket.on('currentChests', chests => {\n      Object.keys(chests).forEach(id => {\n        this.spawnChest(chests[id]);\n      });\n    }); // spawn player game object\n\n    this.socket.on('spawnPlayer', player => {\n      this.createPlayer(player, false);\n    }); // a player has moved\n\n    this.socket.on('playerMoved', player => {\n      this.otherPlayers.getChildren().forEach(otherPlayer => {\n        if (player.id === otherPlayer.id) {\n          otherPlayer.flipX = player.flipX;\n          otherPlayer.setPosition(player.x, player.y);\n          otherPlayer.updateHealthBar();\n          otherPlayer.updateFlipX();\n          otherPlayer.playerAttacking = player.playerAttacking;\n          otherPlayer.currentDirection = player.currentDirection;\n\n          if (player.playerAttacking) {\n            otherPlayer.attack();\n          }\n        }\n      });\n    });\n    this.socket.on('chestSpawned', chest => {\n      this.spawnChest(chest);\n    });\n    this.socket.on('monsterSpawned', monster => {\n      this.spawnMonster(monster);\n    });\n    this.socket.on('chestRemoved', chestId => {\n      this.chests.getChildren().forEach(chest => {\n        if (chest.id === chestId) {\n          chest.makeInactive();\n        }\n      });\n    });\n    this.socket.on('monsterRemoved', monsterId => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterId) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n    this.socket.on('monsterMovement', monsters => {\n      this.monsters.getChildren().forEach(monster => {\n        Object.keys(monsters).forEach(monsterId => {\n          if (monster.id === monsterId) {\n            this.physics.moveToObject(monster, monsters[monsterId], 40);\n          }\n        });\n      });\n    });\n    this.socket.on('updateScore', goldAmount => {\n      this.events.emit('updateScore', goldAmount);\n    });\n    this.socket.on('updateMonsterHealth', (monsterId, health) => {\n      this.monsters.getChildren().forEach(monster => {\n        if (monster.id === monsterId) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n    this.socket.on('updatePlayerHealth', (playerId, health) => {\n      if (this.player.id === playerId) {\n        if (health < this.player.health) {\n          this.playerDamageAudio.play();\n        }\n\n        this.player.updateHealth(health);\n      } else {\n        this.otherPlayers.getChildren().forEach(player => {\n          if (player.id === playerId) {\n            player.updateHealth(health);\n          }\n        });\n      }\n    });\n    this.socket.on('respawnPlayer', playerObject => {\n      if (this.player.id === playerObject.id) {\n        this.playerDeathAudio.play();\n        this.player.respawn(playerObject);\n      } else {\n        this.otherPlayers.getChildren().forEach(player => {\n          if (player.id === playerObject.id) {\n            player.respawn(playerObject);\n          }\n        });\n      }\n    });\n    this.socket.on('disconnect', playerId => {\n      this.otherPlayers.getChildren().forEach(player => {\n        if (playerId === player.id) {\n          player.cleanUp();\n        }\n      });\n    });\n    this.socket.on('invalidToken', () => {\n      window.alert('Token is no longer valid. Please login again.');\n      window.location.reload();\n    });\n  }\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n    this.createInput(); // emit event to server that a new player joined\n\n    this.socket.emit('newPlayer', {\n      test: 1234\n    });\n  }\n\n  update() {\n    if (this.player) this.player.update(this.cursors);\n\n    if (this.player) {\n      // emit player movement to the server\n      const {\n        x,\n        y,\n        flipX,\n        playerAttacking,\n        currentDirection\n      } = this.player;\n\n      if (this.player.oldPosition && (x !== this.player.oldPosition.x || y !== this.player.oldPosition.y || flipX !== this.player.oldPosition.flipX || playerAttacking !== this.player.oldPosition.playerAttacking)) {\n        this.socket.emit('playerMovement', {\n          x,\n          y,\n          flipX,\n          playerAttacking,\n          currentDirection\n        });\n      } // save old position data\n\n\n      this.player.oldPosition = {\n        x: this.player.x,\n        y: this.player.y,\n        flipX: this.player.flipX,\n        playerAttacking: this.player.playerAttacking\n      };\n    }\n  }\n\n  createAudio() {\n    this.goldPickupAudio = this.sound.add('goldSound', {\n      loop: false,\n      volume: 0.3\n    });\n    this.playerAttackAudio = this.sound.add('playerAttack', {\n      loop: false,\n      volume: 0.01\n    });\n    this.playerDamageAudio = this.sound.add('playerDamage', {\n      loop: false,\n      volume: 0.2\n    });\n    this.playerDeathAudio = this.sound.add('playerDeath', {\n      loop: false,\n      volume: 0.2\n    });\n    this.monsterDeathAudio = this.sound.add('enemyDeath', {\n      loop: false,\n      volume: 0.2\n    });\n  }\n\n  createPlayer(playerObject, mainPlayer) {\n    const newPlayerGameObject = new PlayerContainer(this, playerObject.x * 2, playerObject.y * 2, 'characters', 0, playerObject.health, playerObject.maxHealth, playerObject.id, this.playerAttackAudio, mainPlayer);\n\n    if (!mainPlayer) {\n      this.otherPlayers.add(newPlayerGameObject);\n    } else {\n      this.player = newPlayerGameObject;\n    }\n  }\n\n  createGroups() {\n    // create a chest group\n    this.chests = this.physics.add.group(); // create a monster group\n\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true; // create an other players group\n\n    this.otherPlayers = this.physics.add.group();\n    this.otherPlayers.runChildUpdate = true;\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!chest) {\n      chest = new Chest(this, chestObj.x * 2, chestObj.y * 2, \"items\", 0, chestObj.gold, chestObj.id);\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n\n    if (!monster) {\n      monster = new Monster(this, monsterObj.x, monsterObj.y, \"monsters\", monsterObj.frame, monsterObj.id, monsterObj.health, monsterObj.maxHealth);\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(this.player, this.chests, this.collectChest, null, this);\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(this.player.weapon, this.monsters, this.enemyOverlap, null, this);\n    this.physics.add.collider(this.otherPlayers, this.player, this.pvpCollider, false, this); // Check overlaps between weapons and other playe game objects\n\n    this.physics.add.overlap(this.player.weapon, this.otherPlayers, this.weaponOverlapEnemy, false, this);\n  }\n\n  pvpCollider(player, otherPlayer) {\n    this.player.body.setVelocity(0);\n    otherPlayer.body.setVelocity(0);\n  }\n\n  weaponOverlapEnemy(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n      this.socket.emit(\"attackedPlayer\", enemy.id);\n    }\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true; // enemy.makeInactive();\n\n      this.socket.emit(\"monsterAttacked\", enemy.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n    this.socket.emit(\"updateScore\", this.score); // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n\n    this.socket.emit(\"pickupChest\", chest.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n\n}\n\nexport default GameScene;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/scenes/GameScene.js"],"names":["Phaser","PlayerContainer","Chest","Monster","Map","SocketService","GameScene","Scene","constructor","socket","init","scene","launch","listenForSocketEvents","on","players","Object","keys","forEach","id","createPlayer","addCollisions","monsters","spawnMonster","chests","spawnChest","player","otherPlayers","getChildren","otherPlayer","flipX","setPosition","x","y","updateHealthBar","updateFlipX","playerAttacking","currentDirection","attack","chest","monster","chestId","makeInactive","monsterId","monsterDeathAudio","play","physics","moveToObject","goldAmount","events","emit","health","updateHealth","playerId","playerDamageAudio","playerObject","playerDeathAudio","respawn","cleanUp","window","alert","location","reload","create","createMap","createAudio","createGroups","createInput","test","update","cursors","oldPosition","goldPickupAudio","sound","add","loop","volume","playerAttackAudio","mainPlayer","newPlayerGameObject","maxHealth","group","runChildUpdate","chestObj","getFirstDead","gold","setCollideWorldBounds","coins","makeActive","monsterObj","frame","setTexture","input","keyboard","createCursorKeys","collider","map","blockedLayer","overlap","collectChest","weapon","enemyOverlap","pvpCollider","weaponOverlapEnemy","body","setVelocity","enemy","swordHit","goldPickupSound","score"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport PlayerContainer from \"game-core/classes/player/PlayerContainer\";\nimport Chest from \"game-core/classes/Chest\";\nimport Monster from \"game-core/classes/Monster\";\nimport Map from \"game-core/classes/Map\";\nimport SocketService from \"shared/services/socket/socket-service\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super(\"Game\");\n\n    this.socket = SocketService?.socket;\n  }\n\n  init() {\n    // Launch instead of start will run scene in parallele - what ever scene active 1st is on bittom lauyet\n    // Start will shut down current and switch to new\n    this.scene.launch(\"Ui\");\n\n\n    // listen for socket event\n    this.listenForSocketEvents();\n  }\n\n  listenForSocketEvents() {\n    // spawn player game objects\n    this.socket.on('currentPlayers', (players) => {\n      Object.keys(players).forEach((id) => {\n        if (players[id].id === this.socket.id) {\n          this.createPlayer(players[id], true);\n          this.addCollisions();\n        } else {\n          this.createPlayer(players[id], false);\n        }\n      });\n    });\n\n    // spawn monster game objects\n    this.socket.on('currentMonsters', (monsters) => {\n      Object.keys(monsters).forEach((id) => {\n        this.spawnMonster(monsters[id]);\n      });\n    });\n\n    // spawn chest game objects\n    this.socket.on('currentChests', (chests) => {\n      Object.keys(chests).forEach((id) => {\n        this.spawnChest(chests[id]);\n      });\n    });\n\n    // spawn player game object\n    this.socket.on('spawnPlayer', (player) => {\n      this.createPlayer(player, false);\n    });\n\n    // a player has moved\n    this.socket.on('playerMoved', (player) => {\n      this.otherPlayers.getChildren().forEach((otherPlayer) => {\n        if (player.id === otherPlayer.id) {\n          otherPlayer.flipX = player.flipX;\n          otherPlayer.setPosition(player.x, player.y);\n          otherPlayer.updateHealthBar();\n          otherPlayer.updateFlipX();\n          otherPlayer.playerAttacking = player.playerAttacking;\n          otherPlayer.currentDirection = player.currentDirection;\n          if (player.playerAttacking) {\n            otherPlayer.attack();\n          }\n        }\n      });\n    });\n\n    this.socket.on('chestSpawned', (chest) => {\n      this.spawnChest(chest);\n    });\n\n    this.socket.on('monsterSpawned', (monster) => {\n      this.spawnMonster(monster);\n    });\n\n    this.socket.on('chestRemoved', (chestId) => {\n      this.chests.getChildren().forEach((chest) => {\n        if (chest.id === chestId) {\n          chest.makeInactive();\n        }\n      });\n    });\n\n    this.socket.on('monsterRemoved', (monsterId) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterId) {\n          monster.makeInactive();\n          this.monsterDeathAudio.play();\n        }\n      });\n    });\n\n    this.socket.on('monsterMovement', (monsters) => {\n      this.monsters.getChildren().forEach((monster) => {\n        Object.keys(monsters).forEach((monsterId) => {\n          if (monster.id === monsterId) {\n            this.physics.moveToObject(monster, monsters[monsterId], 40);\n          }\n        });\n      });\n    });\n\n    this.socket.on('updateScore', (goldAmount) => {\n      this.events.emit('updateScore', goldAmount);\n    });\n\n    this.socket.on('updateMonsterHealth', (monsterId, health) => {\n      this.monsters.getChildren().forEach((monster) => {\n        if (monster.id === monsterId) {\n          monster.updateHealth(health);\n        }\n      });\n    });\n\n    this.socket.on('updatePlayerHealth', (playerId, health) => {\n      if (this.player.id === playerId) {\n        if (health < this.player.health) {\n          this.playerDamageAudio.play();\n        }\n        this.player.updateHealth(health);\n      } else {\n        this.otherPlayers.getChildren().forEach((player) => {\n          if (player.id === playerId) {\n            player.updateHealth(health);\n          }\n        });\n      }\n    });\n\n    this.socket.on('respawnPlayer', (playerObject) => {\n      if (this.player.id === playerObject.id) {\n        this.playerDeathAudio.play();\n        this.player.respawn(playerObject);\n      } else {\n        this.otherPlayers.getChildren().forEach((player) => {\n          if (player.id === playerObject.id) {\n            player.respawn(playerObject);\n          }\n        });\n      }\n    });\n\n    this.socket.on('disconnect', (playerId) => {\n      this.otherPlayers.getChildren().forEach((player) => {\n        if (playerId === player.id) {\n          player.cleanUp();\n        }\n      });\n    });\n\n    this.socket.on('invalidToken', () => {\n      window.alert('Token is no longer valid. Please login again.');\n      window.location.reload();\n    });\n  }\n\n\n\n  create() {\n    this.createMap();\n    this.createAudio();\n    this.createGroups();\n    this.createInput();\n\n    // emit event to server that a new player joined\n    this.socket.emit('newPlayer', { test: 1234 });\n  }\n\n  update() {\n    if (this.player) this.player.update(this.cursors);\n\n    if (this.player) {\n      // emit player movement to the server\n      const {\n        x, y, flipX, playerAttacking, currentDirection,\n      } = this.player;\n      if (this.player.oldPosition && (x !== this.player.oldPosition.x\n        || y !== this.player.oldPosition.y || flipX !== this.player.oldPosition.flipX\n        || playerAttacking !== this.player.oldPosition.playerAttacking)) {\n        this.socket.emit('playerMovement', {\n          x, y, flipX, playerAttacking, currentDirection,\n        });\n      }\n\n      // save old position data\n      this.player.oldPosition = {\n        x: this.player.x,\n        y: this.player.y,\n        flipX: this.player.flipX,\n        playerAttacking: this.player.playerAttacking,\n      };\n    }\n  }\n\n\n  createAudio() {\n    this.goldPickupAudio = this.sound.add('goldSound', { loop: false, volume: 0.3 });\n    this.playerAttackAudio = this.sound.add('playerAttack', { loop: false, volume: 0.01 });\n    this.playerDamageAudio = this.sound.add('playerDamage', { loop: false, volume: 0.2 });\n    this.playerDeathAudio = this.sound.add('playerDeath', { loop: false, volume: 0.2 });\n    this.monsterDeathAudio = this.sound.add('enemyDeath', { loop: false, volume: 0.2 });\n  }\n\n  createPlayer(playerObject, mainPlayer) {\n    const newPlayerGameObject = new PlayerContainer(\n      this,\n      playerObject.x * 2,\n      playerObject.y * 2,\n      'characters',\n      0,\n      playerObject.health,\n      playerObject.maxHealth,\n      playerObject.id,\n      this.playerAttackAudio,\n      mainPlayer,\n    );\n\n    if (!mainPlayer) {\n      this.otherPlayers.add(newPlayerGameObject);\n    } else {\n      this.player = newPlayerGameObject;\n    }\n  }\n\n\n  createGroups() {\n    // create a chest group\n    this.chests = this.physics.add.group();\n    // create a monster group\n    this.monsters = this.physics.add.group();\n    this.monsters.runChildUpdate = true;\n    // create an other players group\n    this.otherPlayers = this.physics.add.group();\n    this.otherPlayers.runChildUpdate = true;\n  }\n\n  spawnChest(chestObj) {\n    // const location =\n    //   this.chestPositons[Math.floor(Math.random() * this.chestPositons.length)];\n    let chest = this.chests.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!chest) {\n      chest = new Chest(\n        this,\n        chestObj.x * 2,\n        chestObj.y * 2,\n        \"items\",\n        0,\n        chestObj.gold,\n        chestObj.id\n      );\n      this.chests.add(chest);\n      chest.setCollideWorldBounds(true);\n    } else {\n      chest.coins = chestObj.gold;\n      chest.id = chestObj.id;\n      chest.setPosition(chestObj.x * 2, chestObj.y * 2);\n      chest.makeActive();\n    }\n  }\n\n  spawnMonster(monsterObj) {\n    let monster = this.monsters.getFirstDead(); // Loop through chest group and get first inactive object in array\n    // If none active - phase will return null\n    if (!monster) {\n      monster = new Monster(\n        this,\n        monsterObj.x,\n        monsterObj.y,\n        \"monsters\",\n        monsterObj.frame,\n        monsterObj.id,\n        monsterObj.health,\n        monsterObj.maxHealth\n      );\n      this.monsters.add(monster);\n      monster.setCollideWorldBounds(true);\n    } else {\n      // monster.coins = monsterObj.gold;\n      monster.id = monsterObj.id;\n      monster.health = monsterObj.health;\n      monster.maxHealth = monsterObj.maxHealth;\n      monster.setTexture(\"monsters\", monsterObj.frame);\n      monster.setPosition(monsterObj.x, monsterObj.y);\n      monster.makeActive();\n    }\n  }\n\n  createInput() {\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  addCollisions() {\n    this.physics.add.collider(this.player, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player,\n      this.chests,\n      this.collectChest,\n      null,\n      this\n    );\n    this.physics.add.collider(this.monsters, this.map.blockedLayer);\n    this.physics.add.overlap(\n      this.player.weapon,\n      this.monsters,\n      this.enemyOverlap,\n      null,\n      this\n    );\n    this.physics.add.collider(\n      this.otherPlayers,\n      this.player,\n      this.pvpCollider,\n      false,\n      this\n    );\n    // Check overlaps between weapons and other playe game objects\n    this.physics.add.overlap(\n      this.player.weapon,\n      this.otherPlayers,\n      this.weaponOverlapEnemy,\n      false,\n      this\n    );\n  }\n\n  pvpCollider(player, otherPlayer) {\n    this.player.body.setVelocity(0);\n    otherPlayer.body.setVelocity(0);\n  }\n\n  weaponOverlapEnemy(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n\n      this.socket.emit(\"attackedPlayer\", enemy.id);\n    }\n  }\n\n  enemyOverlap(player, enemy) {\n    if (this.player.playerAttacking && !this.player.swordHit) {\n      this.player.swordHit = true;\n      // enemy.makeInactive();\n      this.socket.emit(\"monsterAttacked\", enemy.id);\n    }\n  }\n\n  collectChest(player, chest) {\n    chest.makeInactive();\n    this.goldPickupSound.play();\n\n    this.socket.emit(\"updateScore\", this.score);\n    // Delayed call so the chest if it spawns in same location as player its not instantly collected\n    // this.time.delayedCall(1000, this.spawnChest, [], this);\n    this.socket.emit(\"pickupChest\", chest.id);\n  }\n\n  createMap() {\n    this.map = new Map(this, \"map\", \"background\", \"background\", \"blocked\");\n  }\n}\n\nexport default GameScene;\n"]},"metadata":{},"sourceType":"module"}