{"ast":null,"code":"import Phaser from \"phaser\";\nimport Player from \"./Player\";\n\nclass PlayerContainer extends Phaser.GameObjects.Container {\n  constructor(scene, x, y, key, frame, health, maxHealth, id, attackAudio) {\n    super(scene, x, y); //store a reference to the scene\n\n    this.scene = scene;\n    this.velocity = 160;\n    this.currentDirection = DIRECTION.RIGHT;\n    this.playerAttacking = false;\n    this.flipX = true;\n    this.swordHit = false;\n    this.health = health;\n    this.maxHealth = maxHealth;\n    this.id = id;\n    this.attackAudio = attackAudio; // set size on container\n    // by default container wont have size till objs added\n\n    this.setSize(64, 64); // enable physics\n\n    this.scene.physics.world.enable(this); // collide with world bounds\n\n    this.body.setCollideWorldBounds(true); // add the player to our existing scene\n\n    this.scene.add.existing(this);\n    this.scene.cameras.main.startFollow(this); // create player\n    // Game object is relative to container\n\n    this.player = new Player(this.scene, 0, 0, key, frame);\n    this.add(this.player); // Create weapon\n\n    this.weapon = this.scene.add.image(40, 0, \"items\", 4);\n    this.weapon.setScale(1.5);\n    this.scene.physics.world.enable(this.weapon);\n    this.add(this.weapon);\n    this.weapon.alpha = 0; // Want weapon to show only when swinging\n\n    this.createHealthBar();\n  }\n\n  updateHealth(health) {\n    this.health = health;\n    this.updateHealthBar();\n  }\n\n  createHealthBar() {\n    this.healthBar = this.scene.add.graphics();\n    this.updateHealthBar();\n  }\n\n  updateHealthBar() {\n    this.healthBar.clear();\n    this.healthBar.fillStyle(0xffffff, 1);\n    this.healthBar.fillRect(this.x - 32, this.y - 40, 64, 5);\n    this.healthBar.fillGradientStyle(0xff0000, 0xffffff, 4);\n    this.healthBar.fillRect(this.x - 32, this.y - 40, 64 * (this.health / this.maxHealth), 5);\n  }\n\n  respawn(player) {\n    this.health = player.health;\n    this.setPosition(player.x, player.y);\n    this.updateHealthBar();\n  }\n\n  update(cursors) {\n    this.body.setVelocity(0);\n\n    if (cursors.left.isDown) {\n      this.body.setVelocityX(-this.velocity);\n      this.currentDirection = DIRECTION.LEFT;\n      this.weapon.setPosition(-40, 0);\n      this.player.flipX = false;\n    } else if (cursors.right.isDown) {\n      this.body.setVelocityX(this.velocity);\n      this.currentDirection = DIRECTION.RIGHT;\n      this.weapon.setPosition(40, 0);\n      this.player.flipX = true;\n    }\n\n    if (cursors.up.isDown) {\n      this.body.setVelocityY(-this.velocity);\n      this.currentDirection = DIRECTION.UP;\n      this.weapon.setPosition(0, -40);\n    } else if (cursors.down.isDown) {\n      this.body.setVelocityY(this.velocity);\n      this.weapon.setPosition(0, 40);\n      this.currentDirection = DIRECTION.DOWN;\n    }\n\n    if (Phaser.Input.Keyboard.JustDown(cursors.space) && !this.playerAttacking) {\n      this.attackAudio.play();\n      this.weapon.alpha = 1;\n      this.playerAttacking = true;\n      this.scene.time.delayedCall(150, () => {\n        this.weapon.alpha = 0;\n        this.playerAttacking = false;\n        this.swordHit = false;\n      }, [], this);\n    }\n\n    if (this.playerAttacking) {\n      if (this.weapon.flipX) {\n        this.weapon.angle -= 10;\n      } else {\n        this.weapon.angle += 10;\n      }\n    } else {\n      if (this.currentDirection === DIRECTION.DOWN) {\n        this.weapon.setAngle(-270);\n      } else if (this.currentDirection === DIRECTION.UP) {\n        this.weapon.setAngle(-90);\n      } else {\n        this.weapon.setAngle(0);\n      }\n    }\n\n    this.weapon.flipX = false;\n\n    if (this.currentDirection === DIRECTION.LEFT) {\n      this.weapon.flipX = true;\n    }\n\n    this.updateHealthBar();\n  }\n\n}\n\nconst DIRECTION = {\n  RIGHT: \"RIGHT\",\n  LEFT: \"LEFT\",\n  UP: \"UP\",\n  DOWN: \"DOWN\"\n};\nexport default PlayerContainer;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/classes/player/PlayerContainer.js"],"names":["Phaser","Player","PlayerContainer","GameObjects","Container","constructor","scene","x","y","key","frame","health","maxHealth","id","attackAudio","velocity","currentDirection","DIRECTION","RIGHT","playerAttacking","flipX","swordHit","setSize","physics","world","enable","body","setCollideWorldBounds","add","existing","cameras","main","startFollow","player","weapon","image","setScale","alpha","createHealthBar","updateHealth","updateHealthBar","healthBar","graphics","clear","fillStyle","fillRect","fillGradientStyle","respawn","setPosition","update","cursors","setVelocity","left","isDown","setVelocityX","LEFT","right","up","setVelocityY","UP","down","DOWN","Input","Keyboard","JustDown","space","play","time","delayedCall","angle","setAngle"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport Player from \"./Player\";\nclass PlayerContainer extends Phaser.GameObjects.Container {\n  constructor(scene, x, y, key, frame, health, maxHealth, id, attackAudio) {\n    super(scene, x, y);\n\n    //store a reference to the scene\n    this.scene = scene;\n    this.velocity = 160;\n    this.currentDirection = DIRECTION.RIGHT;\n    this.playerAttacking = false;\n    this.flipX = true;\n    this.swordHit = false;\n    this.health = health;\n    this.maxHealth = maxHealth;\n    this.id = id;\n    this.attackAudio = attackAudio;\n    // set size on container\n    // by default container wont have size till objs added\n    this.setSize(64, 64);\n\n    // enable physics\n    this.scene.physics.world.enable(this);\n\n    // collide with world bounds\n    this.body.setCollideWorldBounds(true);\n    // add the player to our existing scene\n    this.scene.add.existing(this);\n\n    this.scene.cameras.main.startFollow(this);\n\n    // create player\n    // Game object is relative to container\n    this.player = new Player(this.scene, 0, 0, key, frame);\n    this.add(this.player);\n\n    // Create weapon\n    this.weapon = this.scene.add.image(40, 0, \"items\", 4);\n    this.weapon.setScale(1.5);\n    this.scene.physics.world.enable(this.weapon);\n    this.add(this.weapon);\n    this.weapon.alpha = 0; // Want weapon to show only when swinging\n\n    this.createHealthBar();\n  }\n\n  updateHealth(health) {\n    this.health = health;\n    this.updateHealthBar();\n  }\n\n  createHealthBar() {\n    this.healthBar = this.scene.add.graphics();\n    this.updateHealthBar();\n  }\n\n  updateHealthBar() {\n    this.healthBar.clear();\n    this.healthBar.fillStyle(0xffffff, 1);\n    this.healthBar.fillRect(this.x - 32, this.y - 40, 64, 5);\n    this.healthBar.fillGradientStyle(0xff0000, 0xffffff, 4);\n    this.healthBar.fillRect(\n      this.x - 32,\n      this.y - 40,\n      64 * (this.health / this.maxHealth),\n      5\n    );\n  }\n\n  respawn(player) {\n    this.health = player.health;\n    this.setPosition(player.x, player.y);\n    this.updateHealthBar();\n  }\n\n  update(cursors) {\n    this.body.setVelocity(0);\n\n    if (cursors.left.isDown) {\n      this.body.setVelocityX(-this.velocity);\n      this.currentDirection = DIRECTION.LEFT;\n      this.weapon.setPosition(-40, 0);\n      this.player.flipX = false;\n    } else if (cursors.right.isDown) {\n      this.body.setVelocityX(this.velocity);\n      this.currentDirection = DIRECTION.RIGHT;\n      this.weapon.setPosition(40, 0);\n      this.player.flipX = true;\n    }\n\n    if (cursors.up.isDown) {\n      this.body.setVelocityY(-this.velocity);\n      this.currentDirection = DIRECTION.UP;\n      this.weapon.setPosition(0, -40);\n    } else if (cursors.down.isDown) {\n      this.body.setVelocityY(this.velocity);\n      this.weapon.setPosition(0, 40);\n      this.currentDirection = DIRECTION.DOWN;\n    }\n\n    if (\n      Phaser.Input.Keyboard.JustDown(cursors.space) &&\n      !this.playerAttacking\n    ) {\n      this.attackAudio.play();\n      this.weapon.alpha = 1;\n      this.playerAttacking = true;\n      this.scene.time.delayedCall(\n        150,\n        () => {\n          this.weapon.alpha = 0;\n          this.playerAttacking = false;\n          this.swordHit = false;\n        },\n        [],\n        this\n      );\n    }\n\n    if (this.playerAttacking) {\n      if (this.weapon.flipX) {\n        this.weapon.angle -= 10;\n      } else {\n        this.weapon.angle += 10;\n      }\n    } else {\n      if (this.currentDirection === DIRECTION.DOWN) {\n        this.weapon.setAngle(-270);\n      } else if (this.currentDirection === DIRECTION.UP) {\n        this.weapon.setAngle(-90);\n      } else {\n        this.weapon.setAngle(0);\n      }\n    }\n\n    this.weapon.flipX = false;\n    if (this.currentDirection === DIRECTION.LEFT) {\n      this.weapon.flipX = true;\n    }\n\n    this.updateHealthBar();\n  }\n}\n\nconst DIRECTION = {\n  RIGHT: \"RIGHT\",\n  LEFT: \"LEFT\",\n  UP: \"UP\",\n  DOWN: \"DOWN\",\n};\n\nexport default PlayerContainer;\n"]},"metadata":{},"sourceType":"module"}