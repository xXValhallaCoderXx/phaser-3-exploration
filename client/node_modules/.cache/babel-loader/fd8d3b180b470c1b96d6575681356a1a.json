{"ast":null,"code":"import Phaser from \"phaser\";\n\nclass Monster extends Phaser.Physics.Arcade.Image {\n  constructor(scene, x, y, key, frame, id, health, maxHealth) {\n    super(scene, x, y, key, frame);\n    this.scene = scene;\n    this.id = id;\n    this.health = health;\n    this.maxHealth = maxHealth; // enable physics\n\n    this.scene.physics.world.enable(this); // set immovable if another object collides with our monster\n\n    this.setImmovable(false); // scale our monster\n\n    this.setScale(2); // collide with world bounds\n\n    this.setCollideWorldBounds(true); // add the monster to our existing scene\n\n    this.scene.add.existing(this);\n    this.setOrigin(0);\n    this.createHealthBar();\n  }\n\n  makeActive() {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.checkCollision.none = false;\n    this.updateHealthBar();\n  }\n\n  makeInactive() {\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.checkCollision.none = true;\n    this.healthBar.clear();\n  }\n\n  updateHealth(health) {\n    this.health = health;\n    this.updateHealthBar();\n  }\n\n  createHealthBar() {\n    this.healthBar = this.scene.add.graphics();\n    this.updateHealthBar();\n  }\n\n  updateHealthBar() {\n    this.healthBar.clear();\n    this.healthBar.fillStyle(0xffffff, 1);\n    this.healthBar.fillRect(this.x, this.y - 8, 64, 5);\n    this.healthBar.fillGradientStyle(0xff0000, 0xffffff, 4);\n    this.healthBar.fillRect(this.x, this.y - 8, 64 * (this.health / this.maxHealth), 5);\n  }\n\n  update() {\n    this.updateHealthBar();\n  }\n\n}\n\nexport default Monster;","map":{"version":3,"sources":["/home/odin/Dungeon/Github/phaser-3-exploration/client/src/game-core/classes/Monster.js"],"names":["Phaser","Monster","Physics","Arcade","Image","constructor","scene","x","y","key","frame","id","health","maxHealth","physics","world","enable","setImmovable","setScale","setCollideWorldBounds","add","existing","setOrigin","createHealthBar","makeActive","setActive","setVisible","body","checkCollision","none","updateHealthBar","makeInactive","healthBar","clear","updateHealth","graphics","fillStyle","fillRect","fillGradientStyle","update"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,OAAN,SAAsBD,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsBC,KAA5C,CAAkD;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,EAA1B,EAA8BC,MAA9B,EAAsCC,SAAtC,EAAiD;AAC1D,UAAMP,KAAN,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,GAAnB,EAAwBC,KAAxB;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKK,EAAL,GAAUA,EAAV;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB,CAL0D,CAM1D;;AACA,SAAKP,KAAL,CAAWQ,OAAX,CAAmBC,KAAnB,CAAyBC,MAAzB,CAAgC,IAAhC,EAP0D,CAQ1D;;AACA,SAAKC,YAAL,CAAkB,KAAlB,EAT0D,CAU1D;;AACA,SAAKC,QAAL,CAAc,CAAd,EAX0D,CAY1D;;AACA,SAAKC,qBAAL,CAA2B,IAA3B,EAb0D,CAc1D;;AACA,SAAKb,KAAL,CAAWc,GAAX,CAAeC,QAAf,CAAwB,IAAxB;AACA,SAAKC,SAAL,CAAe,CAAf;AACA,SAAKC,eAAL;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAKC,SAAL,CAAe,IAAf;AACA,SAAKC,UAAL,CAAgB,IAAhB;AACA,SAAKC,IAAL,CAAUC,cAAV,CAAyBC,IAAzB,GAAgC,KAAhC;AACA,SAAKC,eAAL;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,SAAKN,SAAL,CAAe,KAAf;AACA,SAAKC,UAAL,CAAgB,KAAhB;AACA,SAAKC,IAAL,CAAUC,cAAV,CAAyBC,IAAzB,GAAgC,IAAhC;AACA,SAAKG,SAAL,CAAeC,KAAf;AACD;;AAEDC,EAAAA,YAAY,CAACtB,MAAD,EAAS;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKkB,eAAL;AACD;;AAEDP,EAAAA,eAAe,GAAG;AAChB,SAAKS,SAAL,GAAiB,KAAK1B,KAAL,CAAWc,GAAX,CAAee,QAAf,EAAjB;AACA,SAAKL,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,SAAKE,SAAL,CAAeC,KAAf;AACA,SAAKD,SAAL,CAAeI,SAAf,CAAyB,QAAzB,EAAmC,CAAnC;AACA,SAAKJ,SAAL,CAAeK,QAAf,CAAwB,KAAK9B,CAA7B,EAAgC,KAAKC,CAAL,GAAS,CAAzC,EAA4C,EAA5C,EAAgD,CAAhD;AACA,SAAKwB,SAAL,CAAeM,iBAAf,CAAiC,QAAjC,EAA2C,QAA3C,EAAqD,CAArD;AACA,SAAKN,SAAL,CAAeK,QAAf,CACE,KAAK9B,CADP,EAEE,KAAKC,CAAL,GAAS,CAFX,EAGE,MAAM,KAAKI,MAAL,GAAc,KAAKC,SAAzB,CAHF,EAIE,CAJF;AAMD;;AAED0B,EAAAA,MAAM,GAAG;AACP,SAAKT,eAAL;AACD;;AA5D+C;;AA+DlD,eAAe7B,OAAf","sourcesContent":["import Phaser from \"phaser\";\n\nclass Monster extends Phaser.Physics.Arcade.Image {\n  constructor(scene, x, y, key, frame, id, health, maxHealth) {\n    super(scene, x, y, key, frame);\n    this.scene = scene;\n    this.id = id;\n    this.health = health;\n    this.maxHealth = maxHealth;\n    // enable physics\n    this.scene.physics.world.enable(this);\n    // set immovable if another object collides with our monster\n    this.setImmovable(false);\n    // scale our monster\n    this.setScale(2);\n    // collide with world bounds\n    this.setCollideWorldBounds(true);\n    // add the monster to our existing scene\n    this.scene.add.existing(this);\n    this.setOrigin(0);\n    this.createHealthBar();\n  }\n\n  makeActive() {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.checkCollision.none = false;\n    this.updateHealthBar();\n  }\n\n  makeInactive() {\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.checkCollision.none = true;\n    this.healthBar.clear();\n  }\n\n  updateHealth(health) {\n    this.health = health;\n    this.updateHealthBar();\n  }\n\n  createHealthBar() {\n    this.healthBar = this.scene.add.graphics();\n    this.updateHealthBar();\n  }\n\n  updateHealthBar() {\n    this.healthBar.clear();\n    this.healthBar.fillStyle(0xffffff, 1);\n    this.healthBar.fillRect(this.x, this.y - 8, 64, 5);\n    this.healthBar.fillGradientStyle(0xff0000, 0xffffff, 4);\n    this.healthBar.fillRect(\n      this.x,\n      this.y - 8,\n      64 * (this.health / this.maxHealth),\n      5\n    );\n  }\n\n  update() {\n    this.updateHealthBar();\n  }\n}\n\nexport default Monster;\n"]},"metadata":{},"sourceType":"module"}